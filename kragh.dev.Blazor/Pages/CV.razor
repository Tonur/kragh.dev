@page "/cv"
@using Newtonsoft.Json
@inject KraghConfiguration _config
<h1>CV</h1>

<p>A list of my accomplishments.</p>

<br />

@if (LinkedInResponse is null)
{
	<em>Loading...</em>
}
else
{
	<div class="row justify-content-between">
		<div class="col-6">
			<h2>Jobs</h2>
			@foreach (var experiencesByCompany in LinkedInResponse.Experiences
					.GroupBy(experience => new { experience.Company, experience.LogoUrl, experience.CompanyLinkedInProfileUrl }))
			{
				<ItemCard ItemTitle="@experiencesByCompany.Key.Company"
				  LogoUrl="@experiencesByCompany.Key.LogoUrl"
				  LinkedInProfileUrl="@experiencesByCompany.Key.CompanyLinkedInProfileUrl"
				  ItemEntities="@experiencesByCompany.Select(item => new ItemEntity { Title = item.Title, Description = item.Description, Location = item.Location, StartsAt = item.StartsAt, EndsAt = item.EndsAt})" />
				<br />
			}
		</div>

		<div class="col-6">
			<h2>Educations</h2>
			@foreach (var experiencesByCompany in LinkedInResponse.Education
					.GroupBy(experience => new { experience.School, experience.LogoUrl }))
			{
				<ItemCard ItemTitle="@experiencesByCompany.Key.School"
				  LogoUrl="@experiencesByCompany.Key.LogoUrl"
				  ItemEntities="@experiencesByCompany.Select(item => new ItemEntity { Title = item.DegreeName, Description = item.FieldOfStudy, StartsAt = item.StartsAt, EndsAt = item.EndsAt})" />

				<br />
			}
		</div>
	</div>
}

@code {
	public LinkedInResponse? LinkedInResponse { get; set; }

	private const string ProxyCurlUrl = @"https://nubela.co/proxycurl/api/v2/linkedin";
	private const string LinkedInUrl = @"https://www.linkedin.com/in/";

	protected override async Task OnInitializedAsync()
	{
		var response = await ProxyCurlUrl
			.WithOAuthBearerToken(_config.ProxyCurlToken)
			.SetQueryParams(new
			{
				url = HttpUtility.UrlEncode(LinkedInUrl.AppendPathSegment(_config.LinkedInId).ToString()),
				use_cache = "if-present",
			})
			.GetStringAsync();

		LinkedInResponse = JsonConvert.DeserializeObject<LinkedInResponse>(response);

	}
}
